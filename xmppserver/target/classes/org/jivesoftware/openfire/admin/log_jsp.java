/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2022-03-01 17:58:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.jivesoftware.openfire.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import org.jivesoftware.util.ParamUtils;
import org.jivesoftware.util.Log;
import org.jivesoftware.util.StringUtils;
import org.fusesource.jansi.HtmlAnsiOutputStream;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

public final class log_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    static final SimpleDateFormat formatter = new SimpleDateFormat("yyyy.MM.dd kk:mm:ss");

    private static String parseDate(String input) {
        if (input == null || "".equals(input)) {
            return input;
        }
        if (input.length() < 19) {
            return input;
        }
        String d = input.substring(0,19);
        // try to parse it
        try {
            StringBuffer buf = new StringBuffer(input.length());
            synchronized (formatter) {
                Date date = formatter.parse(d);
                buf.append("<span class=\"date\" title=\"").append(formatter.format(date))
                        .append("\">");
            }
            buf.append(d).append("</span>");
            buf.append(input.substring(19));
            return buf.toString();
        }
        catch (ParseException pe) {
            return input;
        }
    }

    /**
     * Formats ANSI control characters as HTML. Also escapes basic HTML characters.
     */
    private static String ansiToHtml(String input) {
        try (
            final ByteArrayOutputStream bos = new ByteArrayOutputStream();
            final HtmlAnsiOutputStream hos = new HtmlAnsiOutputStream(bos);
        ) {
            hos.write(input.getBytes(StandardCharsets.UTF_8));
            return new String(bos.toByteArray(), StandardCharsets.UTF_8);
        } catch (Exception e) {
            // ANSI-parsing issue? At least escape HTML.
            return StringUtils.escapeHTMLTags(input);
        }
    }

    private static String leadingWhitespaceNonBreaking(String input) {
        if (input == null || "".equals(input)) {
            return input;
        }
        int i = 0;
        while (i < input.length() && Character.isWhitespace(input.charAt(i))) {
            i++;
        }
        if (i>0) {
            // Replace leading whitespace with non-breaking characters (to simulate indentation).
            input = "&nbsp;&nbsp;&nbsp;&nbsp;" + input.substring(i);
        }
        return input;
    }

    private static String hilite(String input) {
        if (input == null || "".equals(input)) {
            return input;
        }
        if (input.contains("org.jivesoftware.")) {
            return "<span class=\"hilite\">" + input + "</span>";
        }
        else if (input.trim().startsWith("---") && input.trim().endsWith("---")) {
            return "<span class=\"hilite-marker\">" + input + "</span>";
        }
        return input;
    }


    String lastLevel = null;
    boolean shouldPrintLine(String level, final String line) {
        if (level == null) {
            return true;
        }
        // If the line doesn't start with the date/time pattern as defined in log4j2.xml, do not skip (probably a stack trace)
        final boolean startsWithDateTime =  line.matches("^\\d{4}.\\d{2}.\\d{2} \\d{2}:\\d{2}:\\d{2}.*");
        // The third 'word' (space-separated sequence of characters) should include the log level (possibly surrounded with ANSI escape characters).
        final String[] words = line.split(" ");
        final boolean hasAtLeastThreeWords = words.length >= 3;

        // Determine what the log level of this line is.
        String detectedLevel = null;
        if (startsWithDateTime && hasAtLeastThreeWords) {
            if (words[2].contains("ERROR")) {
                detectedLevel = "error";
            } else if (words[2].contains("WARN")) {
                detectedLevel = "warn";
            } else if (words[2].contains("INFO")) {
                detectedLevel = "info";
            } else if (words[2].contains("DEBUG")) {
                detectedLevel = "debug";
            } else if (words[2].contains("TRACE")) {
                detectedLevel = "trace";
            }
        }

        final boolean result;
        if (detectedLevel != null && detectedLevel.equalsIgnoreCase(level)) {
            result = true;
        } else if (detectedLevel == null && level.equalsIgnoreCase(lastLevel)) {
            // Assume that this line belongs to the last line that defined a level (eg: stacktrace)
            result = true;
        } else {
            result = false;
        }

        if (detectedLevel != null) {
            lastLevel = detectedLevel;
        }

        return result;
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("org.jivesoftware.util.StringUtils");
    _jspx_imports_classes.add("org.fusesource.jansi.HtmlAnsiOutputStream");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("org.jivesoftware.util.Log");
    _jspx_imports_classes.add("java.text.ParseException");
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
    _jspx_imports_classes.add("org.jivesoftware.util.ParamUtils");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"error.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
      org.jivesoftware.admin.AdminPageBean pageinfo = null;
      pageinfo = (org.jivesoftware.admin.AdminPageBean) _jspx_page_context.getAttribute("pageinfo", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (pageinfo == null){
        pageinfo = new org.jivesoftware.admin.AdminPageBean();
        _jspx_page_context.setAttribute("pageinfo", pageinfo, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write("\r\n\r\n");
      out.write("\r\n\r\n");

    // Get parameters
    String log = ParamUtils.getParameter(request,"log");
    String numLinesParam = ParamUtils.getParameter(request,"lines");
    int numLines = ParamUtils.getIntParameter(request,"lines",50);
    String mode = ParamUtils.getParameter(request,"mode");

    // Only allow requests for valid log file names.
    if (!Arrays.asList("trace","debug","warn","info","error").contains(log)) {
        log = null;
    }

    // Set defaults
    if (mode == null) {
        mode = "asc";
    }
    if (numLinesParam == null) {
        numLinesParam = "50";
    }

    // Other vars
    File logDir = new File(Log.getLogDirectory());
    String filename = "openfire.log";
    File logFile = new File(logDir, filename);
    
    String[] lines = new String[0];
    int start = 0;
    try {
        String line;
        int totalNumLines = 0;
        try(FileInputStream fileInputStream = new FileInputStream(logFile);
            InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, StandardCharsets.UTF_8);
            BufferedReader in = new BufferedReader(inputStreamReader);){
            while ((line=in.readLine()) != null) {
                if (shouldPrintLine(log, line)) {
                    totalNumLines++;
                }
        	}
        }
        // adjust the 'numLines' var to match totalNumLines if 'all' was passed in:
        if ("All".equals(numLinesParam)) {
            numLines = totalNumLines;
        }
        lines = new String[numLines];
        try(FileInputStream fileInputStream = new FileInputStream(logFile);
            InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, StandardCharsets.UTF_8);
            BufferedReader in = new BufferedReader(inputStreamReader);){
            // skip lines
            start = totalNumLines - numLines;
            if (start < 0) { start = 0; }
            int i = 0;
            int j = 0;
            int end = lines.length-1;
            while ((line=in.readLine()) != null && i<numLines) {
                if (!shouldPrintLine(log, line)) {
                    continue;
                }
                j++;
                if (j<start) {
                    continue;
                }
                //line = StringUtils.escapeHTMLTags(line);
                line = ansiToHtml(line);
                line = leadingWhitespaceNonBreaking(line);
                line = parseDate(line);
                line = hilite(line);
                if ("asc".equals(mode)) {
                    lines[i] = line;
                } else {
                    lines[end-i] = line;
                }
                i++;
            }
            numLines = start + i;
        }
    } catch (FileNotFoundException ex) {
        System.err.println("Openfire admin console could not open (log)file.");
        ex.printStackTrace();
    }

      out.write('\r');
      out.write('\n');
      out.write("\r\n\r\n<html>\r\n<head>\r\n    <title>openfire.log</title>\r\n    <meta name=\"decorator\" content=\"none\"/>\r\n    <style type=\"text/css\">\r\n    .log TABLE {\r\n        border : 1px #ccc solid;\r\n    }\r\n    .log TH {\r\n        font-family : verdana, arial, sans-serif;\r\n        font-weight : bold;\r\n        font-size : 8pt;\r\n        color: #eee;\r\n    }\r\n    .log TR TH {\r\n        background-color : #333;\r\n        border-bottom : 1px #ccc solid;\r\n        padding-left : 2px;\r\n        padding-right : 2px;\r\n        text-align : left;\r\n    }\r\n    .log .head-num {\r\n        border-right : 1px #ccc solid;\r\n    }\r\n    .log TD {\r\n        font-family : courier new,monospace;\r\n        font-size : 9pt;\r\n        color: #eee;\r\n        background-color : #333;\r\n    }\r\n    .log .num {\r\n        width : 1%;\r\n        background-color : #333 !important;\r\n        border-right : 1px #ccc solid;\r\n        padding-left : 2px;\r\n        padding-right : 2px;\r\n    }\r\n    .log .line {\r\n        padding-left : 10px;\r\n    }\r\n    .hilite {\r\n        color : #fff;\r\n    }\r\n");
      out.write("    .hilite-marker {\r\n        color : #cc0000;\r\n        font-weight : bold;\r\n        text-decoration-style: double;\r\n    }\r\n    </style>\r\n</head>\r\n<body>\r\n\r\n<div class=\"log\">\r\n<table cellpadding=\"1\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"line-height: 100%;\">\r\n<tr>\r\n    <th class=\"head-num\">");
      if (_jspx_meth_fmt_005fmessage_005f0(_jspx_page_context))
        return;
      out.write("</th>\r\n    <th>&nbsp;</th>\r\n</tr>\r\n<tr>\r\n    <td width=\"1%\" nowrap class=\"num\">\r\n        ");
  if ("asc".equals(mode)) { 
      out.write("\r\n            ");
  for (int j=start+1; j<=numLines; j++) { 
      out.write("\r\n                ");
      out.print( j );
      out.write("<br>\r\n            ");
  } 
      out.write("\r\n        ");
  } else { 
      out.write("\r\n            ");
  for(int j=numLines; j>=start+1; j--) { 
      out.write("\r\n                ");
      out.print( j );
      out.write("<br>\r\n            ");
  } 
      out.write("\r\n        ");
  } 
      out.write("\r\n    </td>\r\n    <td width=\"99%\" class=\"line\" style=\"white-space: nowrap\">\r\n        ");
 for (String line1 : lines) {
            if (line1 != null) {
        
      out.write("\r\n        ");
      out.print( line1 );
      out.write("\r\n        <br>\r\n\r\n        ");
 }
        }
        
      out.write("\r\n    </td>\r\n</tr>\r\n</table>\r\n</div>\r\n\r\n</body>\r\n</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_fmt_005fmessage_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f0_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f0.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f0.setParent(null);
      // /log.jsp(290,25) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f0.setKey("log.line");
      int _jspx_eval_fmt_005fmessage_005f0 = _jspx_th_fmt_005fmessage_005f0.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f0);
      _jspx_th_fmt_005fmessage_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f0_reused);
    }
    return false;
  }
}
